'''
This script will print out a list of selected revisions.

This script was created by Christopher Maltez circa June 16th, 2019
'''
import csv
import rpw
from rpw.ui.forms import Console
from rpw.ui.forms import SelectFromList


cl = FilteredElementCollector(doc)
cl.OfCategory(BuiltInCategory.OST_RevisionClouds)
cl.WhereElementIsNotElementType()


def get_revision(element, parameterName):
	return element.LookupParameter(parameterName).AsValueString()
	#revision = element.LookupParameter(parameterName).AsValueString()

def get_comments(element, parameterName):
	CommentString = element.LookupParameter("Comments").AsString()
	return CommentString
	
def get_comment_parent_sheet_name():
	return doc.GetElement(list(element.GetSheetIds())[0]).Title
	#sheetName = doc.GetElement(list(element.GetSheetIds())[0]).Title

'''#looks like we dont need this one either.
def get_comment_parent_sheet_number():
	return doc.GetElement(list(element.GetSheetIds())[0])
'''

def get_comment_parent_view_name():
	return doc.GetElement(element.OwnerViewId).Name
	#viewName=doc.GetElement(element.OwnerViewId).Name
	
def get_comment_parent_view_number(element, parameterName):
	return doc.GetElement(element.OwnerViewId).LookupParameter("Detail Number").AsString()
	#viewNumber = doc.GetElement(element.OwnerViewId).LookupParameter("Detail Number").AsString()

revList = Revision.GetAllRevisionIds(doc)
revNameList = []


for x in revList: 
	#print(doc.GetElement(x).Name)
	revName = doc.GetElement(x).Name
	revNameList.append(revName)
	#for name in revNameList:
		#print(name)
	

selectedRevisionValue = SelectFromList('Test Window', revNameList)

with open('mycsv.csv', 'w', newline='') as f:
	fieldnames = ['Comment', 'Revsion', 'Sheet Name', 'View Number', 'View Name']
	thewriter = csv.DictWriter(f, fieldnames=fieldnames)
	thewriter.writeheader()
	
	clCount = 0
	for x in cl:
		clCount += 1
	
	for element in cl:
		if get_revision(element, "Revision") == selectedRevisionValue:
	
	for i in range(1, clCount):
             thewriter.writerow({
             'Comment': get_comments(element, "Comments"), 
             'Revsion':get_revision(element, "Revision"), 
             'Sheet Name':get_comment_parent_sheet_name(), 
             'View Number': get_comment_parent_view_number(element, "Detail Number"), 
             'View Name': get_comment_parent_view_name()})
	
	'''
	for element in cl:
		if get_revision(element, "Revision") == selectedRevisionValue:
		
			print "Comment: " + get_comments(element, "Comments")
			print "Revision: " + get_revision(element, "Revision")
			print "Sheet Name: " + get_comment_parent_sheet_name()
			print "View Number: " + get_comment_parent_view_number(element, "Detail Number")
			print "View Name: " + get_comment_parent_view_name()
			print "\n"
	'''
	
	#else: 
	#	print("There are no revision clouds on the '" + selectedRevisionValue + "' revision.")


#TODO: CHECK FOR EMPTY REVISIONS
#TODO: EXPORT TO CSV
'''
with open('mycsv.csv', 'w', newline='') as f:
     fieldnames = ['column1', 'column2', 'column3']
     thewriter = csv.DictWriter(f, fieldnames=fieldnames)
     thewriter.writeheader()
     for i in range(1, 10):
             thewriter.writerow({'column1':'one', 'column2':'two', 'column3':'three'})
'''

#TODO: EXPORT TO WORD DOC IN RMW FORMAT
