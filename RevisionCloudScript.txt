'''
This script will print out a list of selected revisions.

This script was created by Christopher Maltez circa June 16th, 2019
'''
import csv
import rpw
from rpw.ui.forms import Console
from rpw.ui.forms import SelectFromList


cl = FilteredElementCollector(doc)
cl.OfCategory(BuiltInCategory.OST_RevisionClouds)
cl.WhereElementIsNotElementType()


def get_revision(element, parameterName):
	return element.LookupParameter(parameterName).AsValueString()
	#revision = element.LookupParameter(parameterName).AsValueString()

def get_comments(element, parameterName):
	CommentString = element.LookupParameter("Comments").AsString()
	return CommentString
	
def get_comment_parent_sheet_name():
	return doc.GetElement(list(element.GetSheetIds())[0]).Title
	#sheetName = doc.GetElement(list(element.GetSheetIds())[0]).Title

'''#looks like we dont need this one either.
def get_comment_parent_sheet_number():
	return doc.GetElement(list(element.GetSheetIds())[0])
'''

def get_comment_parent_view_name():
	return doc.GetElement(element.OwnerViewId).Name
	#viewName=doc.GetElement(element.OwnerViewId).Name
	
def get_comment_parent_view_number(element, parameterName):
	return doc.GetElement(element.OwnerViewId).LookupParameter("Detail Number").AsString()
	#viewNumber = doc.GetElement(element.OwnerViewId).LookupParameter("Detail Number").AsString()

revList = Revision.GetAllRevisionIds(doc)
revNameList = []


for x in revList: 
	revName = doc.GetElement(x).Name
	revNameList.append(revName)
	

selectedRevisionValue = SelectFromList('Test Window', revNameList)

#clCount = 0
with open('mycsv3.csv', 'w') as f:
	#fieldnames = ['Comment']
	fieldnames = ['column1', 'column2', 'column3']
	thewriter = csv.DictWriter(f, fieldnames=fieldnames)
	#thewriter = csv.writer(f, delimiter=' ')
	thewriter.writeheader()

	for i in range(1, 10):
 	#for element in cl: 
	#	if get_revision(element, "Revision") == selectedRevisionValue:
		thewriter.writerow({'column1':'one', 'column2':'two', 'column3':'three'})
			#thewriter.writerow("i hope this works")
			#print(element)
			# thewriter.writerow({'Comment': get_comments(element, "Comments")})
			#thewriter.writerow({'Comment': element})
			#print(get_comments(element, "Comments"))
	     	
	     	
	     	
	     	'''
with open('mycsv2.csv', 'w', newline='') as f:
with open('mycsv2.csv', 'w') as f:
     fieldnames = ['column1', 'column2', 'column3']
     thewriter = csv.DictWriter(f, fieldnames=fieldnames)
     thewriter.writeheader()
     for i in range(1, 10):
         thewriter.writerow({'column1':'one', 'column2':'two', 'column3':'three'})
'''
	     	
	     	
			#with open('mycsv.csv', 'w', newline='') as f:
			#with open('mycsv2.csv', 'w') as f:
			#fieldnames = ['Comment']
				#'Revsion', 
				#'Sheet Name', 
				#'View Number', 
				#'View Name'
				#]
			#thewriter = csv.DictWriter(f, fieldnames=fieldnames)
			#thewriter.writeheader()
     	#thewriter.writerow({'Comment':'one'})	
		#f.close()
			
			
			#for i in range(1, 10):
		    #         thewriter.writerow({'Comment':'one'})			
	
			#for i in range(0, len(list(cl))):
				#thewriter.writerow({
		             #'Comment': get_comments(element, "Comments"), 
		             #'Revsion': get_revision(element, "Revision"), 
		             #'Sheet Name': get_comment_parent_sheet_name(), 
		             #'View Number': get_comment_parent_view_number(element, "Detail Number"), 
		             # 'View Name': get_comment_parent_view_name()
		             #})
	
	'''
	for element in cl:
		if get_revision(element, "Revision") == selectedRevisionValue:
		
			print "Comment: " + get_comments(element, "Comments")
			print "Revision: " + get_revision(element, "Revision")
			print "Sheet Name: " + get_comment_parent_sheet_name()
			print "View Number: " + get_comment_parent_view_number(element, "Detail Number")
			print "View Name: " + get_comment_parent_view_name()
			print "\n"
	'''
	
	#else: 
	#	print("There are no revision clouds on the '" + selectedRevisionValue + "' revision.")


#TODO: CHECK FOR EMPTY REVISIONS
#TODO: EXPORT TO SCHEDULE TO KEEP IN REVIT
#TODO: EXPORT TO CSV
'''
with open('mycsv.csv', 'w', newline='') as f:
     fieldnames = ['column1', 'column2', 'column3']
     thewriter = csv.DictWriter(f, fieldnames=fieldnames)
     thewriter.writeheader()
     for i in range(1, 10):
         thewriter.writerow({'column1':'one', 'column2':'two', 'column3':'three'})
'''

#INTEROP EXCEL seems to be the way to go for now

#TODO: EXPORT TO WORD DOC IN RMW FORMAT
